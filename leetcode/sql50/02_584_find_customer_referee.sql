#!/usr/bin/env psql --no-password test
/* 
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
| referee_id  | int     |
+-------------+---------+
In SQL, id is the primary key column for this table.
Each row of this table indicates the id of a customer, their name, and the id of the customer who referred them.

 

Find the names of the customer that are not referred by the customer with id = 2.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Customer table:
+----+------+------------+
| id | name | referee_id |
+----+------+------------+
| 1  | Will | null       |
| 2  | Jane | null       |
| 3  | Alex | 2          |
| 4  | Bill | null       |
| 5  | Zack | 1          |
| 6  | Mark | 2          |
+----+------+------------+
Output: 
+------+
| name |
+------+
| Will |
| Jane |
| Bill |
| Zack |
+------+
*/
BEGIN TRANSACTION;
SAVEPOINT "test";

CREATE TABLE IF NOT EXISTS customer (
    id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (
        SEQUENCE NAME customer_id START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE
    ),
    name varchar(25) NOT NULL,
    referee_id int CONSTRAINT referee_exists REFERENCES customer (id)
);
TRUNCATE TABLE customer;
INSERT INTO customer (id, name, referee_id) VALUES
    (1, 'Will', NULL),
    (2, 'Jane', NULL),
    (3, 'Alex', 2),
    (4, 'Bill', NULL),
    (5, 'Zack', 1),
    (6, 'Mark', 2)
RETURNING *;

-- This could be done using the INSERT INTO statement, using the RETURNING clause, I'm sure
\echo 'have the customer_id sequence restart at a number higher than the most recently inserted id'
ALTER SEQUENCE customer_id RESTART WITH 7;

\echo 'try inserting a referee_id to a non-existent customer_id, and it should fail'
SAVEPOINT "fails";
    INSERT INTO customer(name, referee_id) VALUES
        ('Jill', -1);
ROLLBACK TO "fails";

SELECT 'select all customers who were not referred by ' || name || ', but using <>' AS "comment" FROM customer WHERE customer.id = 2;
SELECT name FROM customer WHERE referee_id <> 2;

SELECT 'this missed some, as a comparison like (NULL <> 1) returns ' || CASE WHEN (NULL <> 2) IS NOT DISTINCT FROM NULL THEN 'NULL' ELSE 'something other than NULL (I was wrong)' END || ' (or maybe ' || CASE WHEN (NULL <> 2) IS UNKNOWN THEN 'UNKNOWN' ELSE 'something other than UNKNOWN (I was wrong again)' END || ', normally' AS "comment";

\echo 'change it to use IS DISTINCT FROM'
SELECT name FROM customer WHERE referee_id IS DISTINCT FROM 2;

ROLLBACK TO "test";
ROLLBACK;
